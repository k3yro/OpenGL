#version 330 core

layout(location = 0) out vec4 f_color;

in vec3 v_normal;
in vec3 v_position;

void main()
{
	// Vektor, vom Fragment zur Kamera zeigend. Kamera immer an Position 0,0,0)
	vec3 view = normalize(-v_position); // Richtung durch normalize (Laenge 1)

	// Richtung des Lichts (wird spaeter augelagert)
	vec3 light = normalize(vec3(1.0f, 1.0f, 1.0f)); // 1,1,1 -> Licht von schraeg-vorn

	// Sicherstellung der Normalisierung von normal
	vec3 normal = normalize(v_normal);

	vec3 color = vec3(0.9f, 0.9f, 0.9f); // 1,1,1 -> weiss

	// Specular
	vec3 reflection = reflect(-light, normal);

	vec3 ambient = color * 0.3;
	vec3 diffuse = max(dot(normal, light), 0.0) * color; // dot - Cos des Winkels der beiden Vektoren, max - falls wert negativ
	vec3 specular = pow(max(dot(reflection, view), 0.0), 4.0/*Exponent, um Beleuchtungsflaeche zu verringern*/) * color;

    f_color = vec4(ambient + diffuse + specular, 1.0f/*Alpha fuer Alphablending */);
}